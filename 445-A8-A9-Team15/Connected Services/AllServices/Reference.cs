//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _445_A8_A9_Team15.AllServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AllServices.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MetricToImperial", ReplyAction="http://tempuri.org/IService1/MetricToImperialResponse")]
        double MetricToImperial(string metricType, string imperialType, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MetricToImperial", ReplyAction="http://tempuri.org/IService1/MetricToImperialResponse")]
        System.Threading.Tasks.Task<double> MetricToImperialAsync(string metricType, string imperialType, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ImperialToMetric", ReplyAction="http://tempuri.org/IService1/ImperialToMetricResponse")]
        double ImperialToMetric(string imperialType, string metricType, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ImperialToMetric", ReplyAction="http://tempuri.org/IService1/ImperialToMetricResponse")]
        System.Threading.Tasks.Task<double> ImperialToMetricAsync(string imperialType, string metricType, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SortService", ReplyAction="http://tempuri.org/IService1/SortServiceResponse")]
        string SortService(string userInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SortService", ReplyAction="http://tempuri.org/IService1/SortServiceResponse")]
        System.Threading.Tasks.Task<string> SortServiceAsync(string userInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MergeSort", ReplyAction="http://tempuri.org/IService1/MergeSortResponse")]
        int[] MergeSort(int[] nums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MergeSort", ReplyAction="http://tempuri.org/IService1/MergeSortResponse")]
        System.Threading.Tasks.Task<int[]> MergeSortAsync(int[] nums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Merge", ReplyAction="http://tempuri.org/IService1/MergeResponse")]
        int[] Merge(int[] left, int[] right);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Merge", ReplyAction="http://tempuri.org/IService1/MergeResponse")]
        System.Threading.Tasks.Task<int[]> MergeAsync(int[] left, int[] right);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateHourFromUTC", ReplyAction="http://tempuri.org/IService1/CalculateHourFromUTCResponse")]
        string CalculateHourFromUTC(int hr, int min, int offs, int flag, string pd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateHourFromUTC", ReplyAction="http://tempuri.org/IService1/CalculateHourFromUTCResponse")]
        System.Threading.Tasks.Task<string> CalculateHourFromUTCAsync(int hr, int min, int offs, int flag, string pd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateHourToUTC", ReplyAction="http://tempuri.org/IService1/CalculateHourToUTCResponse")]
        string CalculateHourToUTC(int hr, int offs, string pd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateHourToUTC", ReplyAction="http://tempuri.org/IService1/CalculateHourToUTCResponse")]
        System.Threading.Tasks.Task<string> CalculateHourToUTCAsync(int hr, int offs, string pd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertToUTC", ReplyAction="http://tempuri.org/IService1/ConvertToUTCResponse")]
        string ConvertToUTC(int hr, int min, string pd, string srcZone, bool daylightSavings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertToUTC", ReplyAction="http://tempuri.org/IService1/ConvertToUTCResponse")]
        System.Threading.Tasks.Task<string> ConvertToUTCAsync(int hr, int min, string pd, string srcZone, bool daylightSavings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertFromUTC", ReplyAction="http://tempuri.org/IService1/ConvertFromUTCResponse")]
        string ConvertFromUTC(int hr, int min, int flag, string pd, string destZone, bool daylightSavings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertFromUTC", ReplyAction="http://tempuri.org/IService1/ConvertFromUTCResponse")]
        System.Threading.Tasks.Task<string> ConvertFromUTCAsync(int hr, int min, int flag, string pd, string destZone, bool daylightSavings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStopWords", ReplyAction="http://tempuri.org/IService1/GetStopWordsResponse")]
        string[] GetStopWords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStopWords", ReplyAction="http://tempuri.org/IService1/GetStopWordsResponse")]
        System.Threading.Tasks.Task<string[]> GetStopWordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WordFilter", ReplyAction="http://tempuri.org/IService1/WordFilterResponse")]
        string WordFilter(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WordFilter", ReplyAction="http://tempuri.org/IService1/WordFilterResponse")]
        System.Threading.Tasks.Task<string> WordFilterAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StemmedWords", ReplyAction="http://tempuri.org/IService1/StemmedWordsResponse")]
        string StemmedWords(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StemmedWords", ReplyAction="http://tempuri.org/IService1/StemmedWordsResponse")]
        System.Threading.Tasks.Task<string> StemmedWordsAsync(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TopTenContentWords", ReplyAction="http://tempuri.org/IService1/TopTenContentWordsResponse")]
        string[] TopTenContentWords(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TopTenContentWords", ReplyAction="http://tempuri.org/IService1/TopTenContentWordsResponse")]
        System.Threading.Tasks.Task<string[]> TopTenContentWordsAsync(string url);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : _445_A8_A9_Team15.AllServices.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<_445_A8_A9_Team15.AllServices.IService1>, _445_A8_A9_Team15.AllServices.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double MetricToImperial(string metricType, string imperialType, double value) {
            return base.Channel.MetricToImperial(metricType, imperialType, value);
        }
        
        public System.Threading.Tasks.Task<double> MetricToImperialAsync(string metricType, string imperialType, double value) {
            return base.Channel.MetricToImperialAsync(metricType, imperialType, value);
        }
        
        public double ImperialToMetric(string imperialType, string metricType, double value) {
            return base.Channel.ImperialToMetric(imperialType, metricType, value);
        }
        
        public System.Threading.Tasks.Task<double> ImperialToMetricAsync(string imperialType, string metricType, double value) {
            return base.Channel.ImperialToMetricAsync(imperialType, metricType, value);
        }
        
        public string SortService(string userInput) {
            return base.Channel.SortService(userInput);
        }
        
        public System.Threading.Tasks.Task<string> SortServiceAsync(string userInput) {
            return base.Channel.SortServiceAsync(userInput);
        }
        
        public int[] MergeSort(int[] nums) {
            return base.Channel.MergeSort(nums);
        }
        
        public System.Threading.Tasks.Task<int[]> MergeSortAsync(int[] nums) {
            return base.Channel.MergeSortAsync(nums);
        }
        
        public int[] Merge(int[] left, int[] right) {
            return base.Channel.Merge(left, right);
        }
        
        public System.Threading.Tasks.Task<int[]> MergeAsync(int[] left, int[] right) {
            return base.Channel.MergeAsync(left, right);
        }
        
        public string CalculateHourFromUTC(int hr, int min, int offs, int flag, string pd) {
            return base.Channel.CalculateHourFromUTC(hr, min, offs, flag, pd);
        }
        
        public System.Threading.Tasks.Task<string> CalculateHourFromUTCAsync(int hr, int min, int offs, int flag, string pd) {
            return base.Channel.CalculateHourFromUTCAsync(hr, min, offs, flag, pd);
        }
        
        public string CalculateHourToUTC(int hr, int offs, string pd) {
            return base.Channel.CalculateHourToUTC(hr, offs, pd);
        }
        
        public System.Threading.Tasks.Task<string> CalculateHourToUTCAsync(int hr, int offs, string pd) {
            return base.Channel.CalculateHourToUTCAsync(hr, offs, pd);
        }
        
        public string ConvertToUTC(int hr, int min, string pd, string srcZone, bool daylightSavings) {
            return base.Channel.ConvertToUTC(hr, min, pd, srcZone, daylightSavings);
        }
        
        public System.Threading.Tasks.Task<string> ConvertToUTCAsync(int hr, int min, string pd, string srcZone, bool daylightSavings) {
            return base.Channel.ConvertToUTCAsync(hr, min, pd, srcZone, daylightSavings);
        }
        
        public string ConvertFromUTC(int hr, int min, int flag, string pd, string destZone, bool daylightSavings) {
            return base.Channel.ConvertFromUTC(hr, min, flag, pd, destZone, daylightSavings);
        }
        
        public System.Threading.Tasks.Task<string> ConvertFromUTCAsync(int hr, int min, int flag, string pd, string destZone, bool daylightSavings) {
            return base.Channel.ConvertFromUTCAsync(hr, min, flag, pd, destZone, daylightSavings);
        }
        
        public string[] GetStopWords() {
            return base.Channel.GetStopWords();
        }
        
        public System.Threading.Tasks.Task<string[]> GetStopWordsAsync() {
            return base.Channel.GetStopWordsAsync();
        }
        
        public string WordFilter(string str) {
            return base.Channel.WordFilter(str);
        }
        
        public System.Threading.Tasks.Task<string> WordFilterAsync(string str) {
            return base.Channel.WordFilterAsync(str);
        }
        
        public string StemmedWords(string input) {
            return base.Channel.StemmedWords(input);
        }
        
        public System.Threading.Tasks.Task<string> StemmedWordsAsync(string input) {
            return base.Channel.StemmedWordsAsync(input);
        }
        
        public string[] TopTenContentWords(string url) {
            return base.Channel.TopTenContentWords(url);
        }
        
        public System.Threading.Tasks.Task<string[]> TopTenContentWordsAsync(string url) {
            return base.Channel.TopTenContentWordsAsync(url);
        }
    }
}
